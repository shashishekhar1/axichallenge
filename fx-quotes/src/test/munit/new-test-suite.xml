<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<munit:config name="new-test-suite.xml" />
	<munit:test name="create-fx-qoute-subFlowTest" doc:id="df61d95c-0c86-4b52-98e4-fe25eceb271e" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="e6a16d90-2d39-4a06-ac4f-004c6a869fad" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Http Fx request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/fx-quote-response-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="a24df3c3-a925-4c90-a4a9-0caf7307d032" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Session Id Request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/db-session-id-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="cb6fbffd-12ff-4e30-840f-765bddd4006e" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Save Quote Request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/save-quote-db-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="3806c5f9-6979-4402-9067-e33af9ad2a43" >
				<munit:payload value="#[output application/json --- readUrl('classpath://mocks/create-quote-request-mock.json','application/json')]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to validation-subFlow" doc:id="f61d8e95-660b-48fb-ba29-1fabdee2c355" name="validation-subFlow"/>
		</munit:execution>
		<munit:validation >
			<ee:transform doc:name="Transform Message" doc:id="60c4b643-b696-4b9f-8621-33b766f13fa3" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert doc:name="Assert expression" doc:id="5325aef1-28d8-4823-82df-7337e7847ddb" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="1de71654-698a-43c2-9a8e-78e2226cdb7f" actual="#[payload.fxPair]" expected='EUR-JPY' message="Invalid currency pair"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="75d4757c-73f9-49d3-b2ac-2eb4ce20691a" actual="#[payload.buyAmount as String]" expected='10' message="Invalid buy amount"/>
		</munit:validation>
	</munit:test>
	
	<munit:test name="get-fx-qoute-subFlowTest" doc:id="2b5d261a-23be-4e8f-9076-633fa7efe890" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="fda83d66-8c4e-4163-9246-c8c80d6833a6" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Session Id Request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/db-session-id-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="102bb279-3963-487b-b4f0-77e866c5098f" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get Quote Request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/get-fx-quote-response-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="5aa51eaa-9239-4206-94eb-3bc7ded95291" >
				<munit:attributes value="#[{uriParams : {'quoteId' :'HHAPp8Dnmf'}}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to get-fx-quote-subFlow" doc:id="efab72be-e5df-42ed-9f8f-76ccb06750ea" name="get-fx-quote-subFlow"/>
		</munit:execution>
		<munit:validation >
			<ee:transform doc:name="Transform Message" doc:id="036da915-d041-4d84-b41e-bc329579d2c7" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert doc:name="Assert expression" doc:id="5bcfa89a-5234-4c41-b171-115cd9048362" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="3cc00b69-cad3-4166-bd4b-d2ab3bd61950" actual="#[payload.quoteid]" expected='HHAPp8Dnmf' message="Invalid quote id"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="d4f108ca-f5dd-411b-9255-296f5309bd1c" actual="#[payload.fxpair]" expected="EUR-JPY" message="Invalid Currency Pair"/>
		
</munit:validation>
	</munit:test>

	<munit:test name="update-fx-qoute-subFlowTest" doc:id="d4d3c4cf-1881-4305-a986-928d68b3d3b6" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="90e96ad0-7409-4e56-94ea-4d0c2ede7977" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Http Fx request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/fx-quote-response-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="0f3d9fdf-e62e-4b4c-81f1-a9b1e1901909" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Session Id Request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/db-session-id-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="ad391e1b-8b5d-4078-8aba-d1e5a71696cd" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Save Quote Request" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://mocks/save-quote-db-mock.json','application/json')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="182c8dc7-08c2-460d-aa3b-a74130ac7300" >
				<munit:payload value="#[output application/json --- readUrl('classpath://mocks/update-quote-request-mock.json','application/json')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[{uriParams : {'quoteId' :'HHAPp8Dnmf'}}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to validation-subFlow" doc:id="2401a7b3-7e52-4954-9a1a-474182fb4471" name="validation-subFlow"/>
		</munit:execution>
		<munit:validation >
			<ee:transform doc:name="Transform Message" doc:id="fefe0629-0f54-42fd-b572-2ed14bebdda7" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert doc:name="Assert expression" doc:id="c41d11a6-46c3-481c-ac02-51f810d47459" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="74846b3c-b693-4215-be05-fc56f0b5595b" actual="#[payload.fxPair]" expected='EUR-JPY' message="Invalid currency pair"/>
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="f8b22584-9d44-48e7-bd5c-ff2aa7bc478b" actual="#[payload.buyAmount as String]" expected="25" message="Invalid buy amount"/>
		
</munit:validation>
	</munit:test>
	
	<munit:test name="create-fx-error-qoute-subFlowTest" doc:id="e86d12cb-b051-4575-9216-1d02005e4b01" description="Test">
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="07ba6c70-5395-444d-8e96-47cc764d7e5f" >
				<munit:payload value="#[output application/json --- readUrl('classpath://mocks/create-quote-error-request.json','application/json')]" />

			</munit:set-event>
			<flow-ref doc:name="Flow-ref to validation-subFlow" doc:id="36b437dd-ada6-4052-bc0e-ce03d5628c46" name="validation-subFlow" targetValue="#[readUrl('classpath://mocks/create-quote-request-mock.dwl')]"/>
		</munit:execution>
		<munit:validation >
			<ee:transform doc:name="Transform Message" doc:id="ceb56625-d5df-435c-8d33-a7301d510675" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert doc:name="Assert expression" doc:id="92ef44e3-b043-4338-bfb8-173da9c1f63b" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="ca8f8411-f685-4a9a-a13d-b8c66eec05ce" actual="#[payload.description]" expected='Buy amount or Sell amount should be part of the request.' message="Error response"/>
		</munit:validation>
	</munit:test>
	
	<munit:test name="create-fx-currency-error-qoute-subFlowTest" doc:id="441668ec-149a-4da6-8c82-f93d7940a3f7" description="Test">
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="8b1fd677-1c56-4b65-a1c6-08eadc6a0554" >
				<munit:payload value="#[output application/json --- readUrl('classpath://mocks/create-quote-currency-error-request.json','application/json')]" />

			</munit:set-event>
			<flow-ref doc:name="Flow-ref to validation-subFlow" doc:id="b832a5f5-d2d5-4274-8eec-032a4dfd9865" name="validation-subFlow" targetValue="#[readUrl('classpath://mocks/create-quote-request-mock.dwl')]"/>
		</munit:execution>
		<munit:validation >
			<ee:transform doc:name="Transform Message" doc:id="7e417379-65e9-4708-930c-727f11321b82" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert doc:name="Assert expression" doc:id="5691afdf-7391-43cd-a16d-ff6349cfc6fb" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="552d1164-c70a-4f57-97a7-3767f0bc3e09" actual="#[payload.description]" expected='Buy or Sell currency is required to create a quote.' message="Error response"/>
		</munit:validation>
	</munit:test>
</mule>
